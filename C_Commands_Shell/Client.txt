#include        <sys/types.h>   /* basic system data types */
#include        <sys/socket.h>  /* basic socket definitions */
#include        <netinet/in.h>  /* sockaddr_in{} and other Internet defns */
#include        <arpa/inet.h>   /* inet(3) functions */
#include        <errno.h>
#include        <fcntl.h>               /* for nonblocking */
#include        <netdb.h>
#include        <signal.h>
#include        <stdio.h>
#include        <stdlib.h>
#include        <string.h>
#include        <unistd.h>

#define MAXLINE 1024
#define SA      struct sockaddr

static int      read_cnt;
static char     *read_ptr;
static char     read_buf[MAXLINE];

/////////////////////////////////////////////////////   Obudowanie funkcji read() 

static ssize_t
my_read(int fd, char *ptr)
{

        if (read_cnt <= 0) {
again:
                if ( (read_cnt = read(fd, read_buf, sizeof(read_buf))) < 0) {
                        if (errno == EINTR)
                                goto again;
                        return(-1);
                } else if (read_cnt == 0)
                        return(0);
                read_ptr = read_buf;
        }

        read_cnt--;
        *ptr = *read_ptr++;
        return(1);
}

ssize_t
readline(int fd, void *vptr, size_t maxlen)
{
        ssize_t n, rc;
        char    c, *ptr;

        ptr = vptr;
        for (n = 1; n < maxlen; n++) {
                if ( (rc = my_read(fd, &c)) == 1) {
                        *ptr++ = c;
                        if (c == '\n')         // Funkcja czyta bajty do czasu napotkania znaku końca linii
                                break;
                } else if (rc == 0) {
                        *ptr = 0;
                        return(n - 1);
                } else
                        return(-1);
        }

        *ptr = 0;
        return(n);
}

ssize_t
Readline(int fd, void *ptr, size_t maxlen)
{
        ssize_t         n;

        if ( (n = readline(fd, ptr, maxlen)) < 0)
                perror("BŁĄD readline(): ");
        return(n);
}

///////////////////////////////////////  Obudowanie funkcji wypisywania aby można było informowac o błędach

void
Fputs(const char *ptr, FILE *stream)
{
        if (fputs(ptr, stream) == EOF)
                perror("BŁĄD fputs(): ");
}

char *
Fgets(char *ptr, int n, FILE *stream)
{
        char    *rptr;

        if ( (rptr = fgets(ptr, n, stream)) == NULL && ferror(stream))
                perror("BŁĄD fgets(): ");

        return (rptr);
}

////////////////////////////////////////////////////////    Obudowanie funkcji write()

ssize_t                                         /* Write "n" bytes to a descriptor. */
writen(int fd, const void *vptr, size_t n)
{
        size_t          nleft;
        ssize_t         nwritten;
        const char      *ptr;

        ptr = vptr;
        nleft = n;
        while (nleft > 0) {
                if ( (nwritten = write(fd, ptr, nleft)) <= 0) {       // Zapisywanie w pętli aby zapisać każdy bajt
                        if (nwritten < 0 && errno == EINTR)
                                nwritten = 0;           /* and call write() again */
                        else
                                return(-1);                     /* error */
                }

                nleft -= nwritten;
                ptr   += nwritten;
        }
        return(n);
}

void
Writen(int fd, void *ptr, size_t nbytes)
{
        if (writen(fd, ptr, nbytes) != nbytes)
                perror("writen error");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

void
zdalne_polecenia(FILE *fp, int sockfd)
{
        char    sendline[MAXLINE], recvline[MAXLINE];

        printf("\n\nProgram pozwala wykonywać zdalne polecenia powłoki\n");
        printf("       Shell na Serwerze z komputera klienta\n      ");
        printf("                                                    \n");
        printf("                ^^^^       ^^^                      \n");
        printf("                I   I     I                         \n");
        printf("                I ^^       ^^                       \n");
        printf("                I            I                      \n");
        printf("                I         ^^^                       \n\n");
        printf("       Michał Woźniak  /  Jakub Pisarczyk           \n\n");

        printf("Wpisz dwa procesy oddzielone spacją:\n");
        printf("Np odpowiednio (ls | wc) -> (ls wc)\n");

        while (Fgets(sendline, MAXLINE, fp) != NULL) {

                Writen(sockfd, sendline, strlen(sendline));

//              if (Readline(sockfd, recvline, MAXLINE) == 0){
//                      perror("zdalne_polecenia: Serwer uległ zamknięciu");
//                      exit(0);
//              }
//              Fputs(recvline, stdout);
                printf("Wysłano !\n");
                printf("Wpisz kolejną komende powłoki Shell:\n");
        }
}

///////////////////////////////////////////////////////////////////////       MAIN

int
main(int argc, char **argv)
{
        int                                     sockfd, n;
        struct sockaddr_in6     servaddr;
        char                            recvline[MAXLINE + 1];

        if (argc != 2){     
                fprintf(stderr, "Schemat wywołania funkcji: %s <IPv6_address> : \n", argv[0]);
                return 1;
        }
        if ( (sockfd = socket(AF_INET6, SOCK_STREAM, 0)) < 0){
                fprintf(stderr,"socket error : %s\n", strerror(errno));
                return 1;
        }

        bzero(&servaddr, sizeof(servaddr));
        servaddr.sin6_family = AF_INET6;
        servaddr.sin6_port   = htons(514);      /* echo server */
        
	if (inet_pton(AF_INET6, argv[1], &servaddr.sin6_addr) <= 0){
                fprintf(stderr,"inet_pton error for %s : \n", argv[1]);
                return 1;
        }

        if (connect(sockfd, (SA *) &servaddr, sizeof(servaddr)) < 0){
                fprintf(stderr,"connect error : %s \n", strerror(errno));
                return 1;
        }

        zdalne_polecenia(stdin, sockfd);       

        fprintf(stderr,"OK\n");
        fflush(stderr);

        exit(0);
}
